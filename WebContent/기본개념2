class PersonInfo {
	private String name;
	private String gender;
	private int age;
	private double height;
	private double weight;
	
	//PersonInfo(){
	//}
	PersonInfo(String name){
		this.name = name;
	} 
	PersonInfo(String name, String gender){
		this.name = name;
		this.gender = gender;
	} 
	PersonInfo(String name, String gender, int age){
		this.name = name;
		this.gender = gender;
		this.age = age;
	} 
	데이터를 필드에 담을 메소드선언: setter - set필드명
	void setGender(String gender){
		this.gender = gender;
	}
	void setAge(int age){
		this.age = age;
	}
	void setHeight(double height){
		this.height = height;
	}
	void setWeight(double weight){
		this.weight = weight;
	}
	
	void setInfo(double height, double weight){
		this.height = height;
		this.weight = weight;
	}
	
	void setInfo(int age, double height, double weight){
		this.age = age;
		this.height = height;
		this.weight = weight;
	}
}

파라미터를 갖는 생성자가 선언되어 있다면  
default  생성자는 자동으로 생성되어지지 않는다. 
-> default 생성자로 객체생성을 하려면 default 생성자를 반드시 선언해야만 함.
   
메소드 파라미터의 갯수를 다르게 하거나
       파라미터의 데이터타입을 다르게 하여 
동일한 이름의 메소드를 여러개 선언하는 것 : 메소드 오버로딩
   
class   PersonInfoMain{
	public static void main(String s[]){
	
		//new PersonInfo();
		PersonInfo hong = new PersonInfo("홍길동");
		hong.setGender("남");
		hong.setAge(20);
		hong.setHeight( 170.0 );
		hong.setWeight( 73.5 );
		
		PersonInfo sim = new PersonInfo("심청", "여", 12);
		sim.setInfo(140, 35.5);
		
		PersonInfo sim2 = new PersonInfo("심청", "여");
		sim2.setInfo(13, 150, 40.5);
		
		PersonInfo sim3 = new PersonInfo("심청", "여");
		sim2.setInfo(14, 160, 43.5);
		
	}
} 















